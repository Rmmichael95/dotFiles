local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not (vim.uv or vim.loop).fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable", -- latest stable release
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

require("lazy").setup({
{
    "williamboman/mason.nvim",
    "williamboman/mason-lspconfig.nvim",
    "neovim/nvim-lspconfig",                              -- config for nvim build in lsp
},
  {"nvimdev/lspsaga.nvim",                               -- A light-weight lsp plugin based on neovim built-in lsp with highly a performant UI
    config = function()
        require('lspsaga').setup({})
    end,
    dependencies = {
        "nvim-treesitter/nvim-treesitter", -- optional
        "nvim-tree/nvim-web-devicons",     -- optional
    }
  },
  "folke/lsp-colors.nvim",                              -- automatically creates LSP diagnostics highlight groups for color schemes that don't support builtin lsp
  "hrsh7th/cmp-nvim-lsp",                               -- completion frontend using only native nvim lsp features
  "hrsh7th/cmp-buffer",                                 -- completion frontend using only native nvim lsp features
  "hrsh7th/cmp-path",                                   -- completion frontend using only native nvim lsp features
  "hrsh7th/cmp-cmdline",                                -- completion frontend using only native nvim lsp features
  {"hrsh7th/nvim-cmp", dependencies = { "hrsh7th/cmp-emoji" }},
  {"L3MON4D3/LuaSnip", build = "make install_jsregexp"}, -- completion frontend using only native nvim lsp features
  "saadparwaiz1/cmp_luasnip",                           -- completion frontend using only native nvim lsp features
  "onsails/lspkind-nvim",                               -- vscode-like pictograms for neovim lsp completion items
  {"puremourning/vimspector",                            -- VSCode style debugging
   build='~/.local/share/nvim/lazy/vimspector/install_gadget.py --all',
  },
  {"nvim-treesitter/nvim-treesitter", cmd="TSUpdate"}, -- treesitter all in one language syntax
  "nvim-treesitter/nvim-treesitter-textobjects",       -- use treesitter for smart text objects
  "HiPhish/rainbow-delimiters.nvim",                    -- use TS for rainbow params
  {"prettier/vim-prettier",
    build="yarn install --frozen-lockfile --production",
    branch="release/0.x"
  },
  {"nvim-telescope/telescope.nvim",
   dependencies = { "nvim-lua/plenary.nvim", "BurntSushi/ripgrep" }
  },
  {"nvim-telescope/telescope-fzf-native.nvim",
   build = "cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release && cmake --install build --prefix build"
  },
  {
    "nvim-telescope/telescope-file-browser.nvim",
    dependencies = { "nvim-telescope/telescope.nvim", "nvim-lua/plenary.nvim" }
  },
  {"pianocomposer321/yabs.nvim",
   dependencies = { "nvim-lua/plenary.nvim" }
  },
  "ojroques/nvim-lspfuzzy",                             -- use skim for quickfix list
  "hoob3rt/lualine.nvim",                               -- statusline in lua
  {"akinsho/bufferline.nvim", version = "*", dependencies = 'nvim-tree/nvim-web-devicons'},
  "christoomey/vim-tmux-navigator",
  "szw/vim-maximizer",
  "vim-scripts/ReplaceWithRegister",
  "jamessan/vim-gnupg",                                 -- easy encripted files in vim
  "neanias/everforest-nvim",
  "sainnhe/everforest",                                 -- colorscheme that plays nice with redshift
  "glepnir/dashboard-nvim",                             -- pretty starting bloat for vim
  "neomutt/neomutt.vim",                                -- helpful setting for mail ft
  "easymotion/vim-easymotion",                          -- visualize text motions
  "dinhhuy258/git.nvim",                                 -- rewrite of tpope fugitive in lua
  "justinmk/vim-dirvish",                               -- replacement for netrw
  "kristijanhusak/vim-dirvish-git",                     -- add git bloat to dirvish
  "bounceme/remote-viewer",                             -- add remote fs support to dirvish; now it's really netrw
  "tpope/vim-eunuch",                                   -- Unix commands in vim; useful for dirvish
  "tpope/vim-surround",                                 -- change surrounding grouping symbol
  "tpope/vim-repeat",                                   -- repeat full plugin actions
  "rhysd/vim-grammarous",                               -- all in one grammar checker for vim
  "numToStr/Comment.nvim",                               -- tpope commentary with ts support
  "mbbill/undotree",                                    -- undo visualizer for vim
  "dhruvasagar/vim-table-mode",                         -- make table structures right in vim
  "elkowar/yuck.vim",
  "echasnovski/mini.hipatterns",
  "ntpeters/vim-better-whitespace",
--  { "dccsillag/magma-nvim", cmd = "UpdateRemotePlugins" }, -- visualizer for python
  {
  "folke/trouble.nvim",
    opts = {}, -- for default options, refer to the configuration section for custom setup.
    cmd = "Trouble",
    keys = {
      {
        "<leader>xx",
        "<cmd>Trouble diagnostics toggle<cr>",
        desc = "Diagnostics (Trouble)",
      },
      {
        "<leader>xX",
        "<cmd>Trouble diagnostics toggle filter.buf=0<cr>",
        desc = "Buffer Diagnostics (Trouble)",
      },
      {
        "<leader>cs",
        "<cmd>Trouble symbols toggle focus=false<cr>",
        desc = "Symbols (Trouble)",
      },
      {
        "<leader>cl",
        "<cmd>Trouble lsp toggle focus=false win.position=right<cr>",
        desc = "LSP Definitions / references / ... (Trouble)",
      },
      {
        "<leader>xL",
        "<cmd>Trouble loclist toggle<cr>",
        desc = "Location List (Trouble)",
      },
      {
        "<leader>xQ",
        "<cmd>Trouble qflist toggle<cr>",
        desc = "Quickfix List (Trouble)",
      },
    },
  }
})
