use std::*;
use std::collections::HashMap;

fn calculate_grade_rank<T, T>(grade: T) -> T {
    "
        function to calculate unambiguous rock climb grades, the grade should be passed as a string, e.g. \"V7\" or \"5.10a\"
    ";
    let weight_dict = [("YDS", [("a", 0), ("a/b", 1), ("-", 1), ("b", 2), ("b/c", 3), ("not_given", 3), ("c", 4), ("c/d", 5), ("+", 5), ("d", 6)].iter().cloned().collect::<HashMap<_,_>>()), ("Vermin", [("-", 0), ("not_given", 1), ("+", 2), ("range", 2)].iter().cloned().collect::<HashMap<_,_>>())].iter().cloned().collect::<HashMap<_,_>>();

    if grade == None {
        return grade;
    } else {
        if grade.iter().any(|&x| x == "V") {
            let mut grade_type = "Vermin";
            let noV = grade.replace("V", "");
            let mut ran = re.match("{1,2}-{1,2}", noV);
            let mut num = i32::from(re.sub("[^0-9]", "", noV.split("-")[0]));
            let mut non_num = re.sub("[0-9]", "", noV);
        } else {
        if grade.iter().any(|&x| x == "5.") {
            grade_type = "YDS";
            let no5 = grade.split(".")[-1];
            num = i32::from(re.sub("[^0-9]", "", no5));
            let mut non_num = re.sub("[0-9]", "", no5);
            ran = None;
            } else {
                let message = " ".join(vec!["grade format of", grade, "does not match the YDS or Vermin systems."]);
                raise!(ValueError(message)); //unsupported
            }
        }
    }
    let mut non_num = if non_num == "" { "not_given" } else { non_num };
    let wdict = weight_dict[grade_type];
    let weight = if ran { wdict["range"] } else { wdict[non_num] };
    let rank = ((10*num) + weight);
    return rank;
}
fn main() {
    let example_grades = vec!["V8-9", "V9", "V10-", "V10", "V10+", "V10-11", "5.8", "5.9", "5.9+", "5.12a", "5.12a/b", "5.12-", "5.12b", "5.12b/c", "5.12", "5.12c", "5.12c/d", "5.12+", "5.12d"];
    for grade in example_grades {
        let line = vec![grade, calculate_grade_rank(grade)];
        println!("{:?} ","{:<7} {:<3}".format(starred!(line)/*unsupported*/));
    }
}
