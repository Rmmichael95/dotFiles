from __future__ import print_function

import sys
import datetime
import os.path
import subprocess

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# If modifying these scopes, delete the file token.json.
SCOPES = ['https://www.googleapis.com/auth/calendar']


def main(args):
    creds = None
    # The file token.json stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open('token.json', 'w') as token:
            token.write(creds.to_json())

    try:
        service = build('calendar', 'v3', credentials=creds)

        # Call the Calendar API
        today = datetime.datetime.today().isoformat() + 'Z'  # 'Z' indicates UTC time
        print('Making apts file ' + today)
        events_result = service.events().list(calendarId='primary',
                                              timeMin=today, timeMax='2024-01-01T10:00:00Z',
                                              singleEvents=True,
                                              orderBy='startTime').execute()
        events = events_result.get('items', [])

        if not events:
            print('No upcoming events found.')
            return

        # Prints the start and name of the next 10 events
        found = False
        input = args[1]
        sdate = input[0:10]
        if input[12:13] == '@':
            # TODO put date in proper format first
            sdate = 'append time'
            edate = 'get end date and time'
            summary = 'get summary'
        else:
            edate = sdate
            summary = input[15:]
    
        for event in events:
            if event['start'].get('date') == sdate and event['summary'] == summary:
                found = True

        if not found:
            event = {
              'summary': summary,
              # 'location': location,
              'description': summary,
              'start': {
                'dateTime': sdate,
                'timeZone': datetime.datetime.tzinfo,
              },
              'end': {
                'dateTime': edate,
                'timeZone': datetime.datetime.tzinfo,
              },
            }

            event = service.events().insert(calendarId='primary', body=event).execute()

    except HttpError as error:
        subprocess.Popen(['notify-send', 'An error occurred: %s' % error])


if __name__.__eq__('__main__'):
    main(sys.argv)
