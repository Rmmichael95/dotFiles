#CXX=g++
#CXX=clang++
CXX=zig c++
LIBS=
# flags
#CXXFLAGS=-std=c++17 -pthread
CXXFLAGS=-pthread
CPPFLAGS=
# target dirs
OBJDIR=obj
SRCDIR=src
RECDIR=rec
# executable name
TARGET=main

RM=rm -rf
MKDIR=@mkdir -p
DIR_GUARD=$(MKDIR) $(@D)

SRCT=$(wildcard *.cpp *.h)
RECT=$(wildcard *.txt)

DEBUG ?= 1

ifeq ($(DEBUG),1)
	CXXFLAGS +=-DLOG_LEVEL=DEBUG_LEVEL -O0 -ggdb
	CPPFLAGS +=-Wall -Wconversion -Wnarrowing -Wextra -pedantic
else
	CXXFLAGS  +=-Ofast -g
endif

SRCS=$(wildcard $(SRCDIR)/*.cpp)
OBJS=$(addprefix $(OBJDIR)/, $(notdir $(SRCS:.cpp=.o)))
RECS=$(wildcard $(RECT))

all: $(TARGET)

$(TARGET): $(OBJS)
	@echo [INFO] Creating executable [$(TARGET)]
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(OBJS) -o $(TARGET) $(LIBS)

$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
	$(DIR_GUARD)
	@echo [CC] $<
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c -o $@ $<

clean:
	@echo "[Cleaning]"
	@$(RM) $(OBJS)

dist-clean: clean
	@$(RM) $(TARGET)

dir: $(SRCDIR)

$(SRCDIR): $(RECDIR)
ifeq ($(SRCT),)
else
	@echo [INFO] Handling SAUCE [$(SRCT)]
	@$(MKDIR) $(SRCDIR)
	@mv $(SRCT) $(SRCDIR)
endif

$(RECDIR):
ifeq ($(RECS),)
else
	@echo [INFO] Handling reSAUCEs [$(RECT)]
	@$(MKDIR) $(RECDIR)
	@mv $(RECS) $(RECDIR)
endif
